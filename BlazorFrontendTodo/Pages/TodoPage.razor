@page "/todo"
@using BlazorFrontendTodo.Components
@using BlazorFrontendTodo.Models
@using BlazorFrontendTodo.Models.Dtos
@using BlazorFrontendTodo.Services.Interfaces
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject IAuthService AuthService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager _navigationManager
@inject NotificationService _nfService

<RadzenNotification/>

<div class="d-flex justify-content-end">
  <LoginDisplay/>
</div>

<div class="col-lg-6 offset-lg-3 " align="center">
  <RadzenText TextStyle="TextStyle.DisplayH2">What tasks are you doing today?</RadzenText>
@if (isLoading)
{
  <p>Loading tasks...</p>
}
else
{
  <div class="row">
    <div class="d-flex col m-2 justify-content-evenly">

      <RadzenTextBox Placeholder="Do laundry..." Name="TaskContent" @bind-Value="currentTodo.Content" Style="flex-grow: 1;"/>
      <RadzenRequiredValidator Component="TaskContent" DefaultValue="string.Empty"/>

      <RadzenButton Icon="calendar_month" Click="ToggleCalendar"/>
      @if (isCalendarVisible)
      {
        <RadzenDatePicker @bind-Value="currentTodo.Reminder" ShowTime="true" DateFormat="dd/MM/yyyy HH:mm" Min="DateTime.Now" InitialViewDate="DateTime.Now"/>
      }
      <RadzenButton class="pr-2" Icon="@(isEditing ? "save" : "add")" Click="@(isEditing ? SaveTask : CreateTask)"/>
    </div>
  </div>
  @if (tasks.Any(t => t.IsCompleted))
  {
    <div class="row m-2">
      <RadzenButton Icon="delete" Text="Delete all completed tasks" Click="DeleteCompletedTasks"/>
    </div>
  }
  <div class="row p-2">
    <div class="col">
      <TaskList TItem="TaskItem" OnDelete="DeleteTask" OnEdit="EditTask" Tasks="@tasks" OnTaskCompletedChanged="HandleTaskCompletedChange"/>
    </div>
  </div>
}
</div>


@code {
  private List<TaskItem> tasks = new(); // Listen af tasks for brugeren
  private CreateTaskDto currentTodo = new(); // Den aktuelle opgave, der bliver redigeret
  private string? errorMessage; // Til at gemme fejlbeskeder
  private bool isCalendarVisible; // Styrer synligheden af kalenderen
  private bool isEditing; // Flag for at tjekke om vi er i redigeringstilstand
  private bool isLoading = true;
  private Guid? editingTaskId; // ID for den task, der redigeres


  protected override async Task OnInitializedAsync()
  {
    var token = await AuthService.GetTokenAsync();
    if (!string.IsNullOrEmpty(token))
    {
      var userId = await AuthService.GetUserIdAsync(); // Hent bruger-id'et
      var httpClient = HttpClientFactory.CreateClient("taskApi");
      tasks = await httpClient.GetFromJsonAsync<List<TaskItem>>($"api/task/user/{userId}");
      if (!tasks.Any() || tasks == null)
      {
        _nfService.Notify(NotificationSeverity.Info, "Info", "No tasks were found.");
      }
        isLoading = false;

      StateHasChanged();
    }
    else
    {
      _navigationManager.NavigateTo("/login");
    }
  }

  private async Task CreateTask()
  {
    if (string.IsNullOrWhiteSpace(currentTodo.Content))
    {
      errorMessage = "Task content cannot be empty.";
      _nfService.Notify(NotificationSeverity.Warning, "Warning", errorMessage, -1);
      return;
    }

    if (currentTodo.Reminder <= DateTime.Now)
    {
      errorMessage = "Reminder cannot be in the past.";
      _nfService.Notify(NotificationSeverity.Warning, "Warning", errorMessage, -1);
      return;
    }


    var userId = await AuthService.GetUserIdAsync(); // Hent brugerid

    var userEmail = await AuthService.GetUserEmailAsync(); //Hent email fra bruger

    if (string.IsNullOrWhiteSpace(userId))
    {
      errorMessage = "User ID not found.";
      _nfService.Notify(NotificationSeverity.Warning, "Warning", errorMessage, -1);
      return;
    }

    var newTask = new CreateTaskDto
    {
      UserId = userId, // Brug det hentede bruger ID
      UserEmail = userEmail,
      Content = currentTodo.Content,
      Reminder = currentTodo.Reminder
    };

    var httpClient = HttpClientFactory.CreateClient("taskApi");

    var response = await httpClient.PostAsJsonAsync("api/task", newTask);
    if (response.IsSuccessStatusCode)
    {
      var createdTask = await response.Content.ReadFromJsonAsync<TaskItem>();
      if (createdTask != null)
        tasks.Add(createdTask);

      StateHasChanged(); // Opdatér visningen

      _nfService.Notify(NotificationSeverity.Success, "Success", "Task created successfully.");
    }
    else
    {
      var errorDetails = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
      errorMessage = $"Failed to create task: {errorDetails["message"]}";
      _nfService.Notify(NotificationSeverity.Error, "Failed", errorMessage);
    }

    currentTodo = new CreateTaskDto(); //nulstil taskitem

    isCalendarVisible = false; // Skjul kalenderen efter oprettelse af en ny opgave
    StateHasChanged(); // Opdatér TodoPage komponenten
  }

  private void EditTask(TaskItem task)
  {
    if (task.Reminder.HasValue)
    {
      isCalendarVisible = true;
    }

    currentTodo = new CreateTaskDto
    {
      Content = task.Content,
      Reminder = task.Reminder
    };
    editingTaskId = task.Id;
    isEditing = true; // Sæt redigeringstilstand til true
  }

  private async Task SaveTask()
  {
    if (string.IsNullOrWhiteSpace(currentTodo.Content) || editingTaskId == null)
    {
      errorMessage = "Task content cannot be empty.";
      _nfService.Notify(NotificationSeverity.Warning, "Warning", errorMessage, -1);
      return;
    }

    var taskToUpdate = tasks.FirstOrDefault(t => t.Id == editingTaskId);

    if (taskToUpdate == null)
    {
      errorMessage = "Task not found.";
      _nfService.Notify(NotificationSeverity.Warning, "Warning", errorMessage, -1);
      return;
    }

    // Check if there are any changes
    if (taskToUpdate.Content == currentTodo.Content && taskToUpdate.Reminder == currentTodo.Reminder)
    {
      _nfService.Notify(NotificationSeverity.Info, "Info", "No changes were done.");
      isEditing = false; // Nulstil redigeringstilstand
      currentTodo = new CreateTaskDto(); // Nulstil taskitem
      return;
    }

    taskToUpdate.Content = currentTodo.Content;
    taskToUpdate.Reminder = currentTodo.Reminder;

    var httpClient = HttpClientFactory.CreateClient("taskApi");
    var response = await httpClient.PutAsJsonAsync($"api/task/{taskToUpdate.Id}", taskToUpdate);
    if (response.IsSuccessStatusCode)
    {
      _nfService.Notify(NotificationSeverity.Success, "Success", "Task updated successfully.");
    }
    else
    {
      var errorDetails = await response.Content.ReadAsStringAsync();
      errorMessage = $"Failed to update task: {errorDetails}";
      _nfService.Notify(NotificationSeverity.Error, "Failed", errorMessage);
    }

    currentTodo = new CreateTaskDto(); // Nulstil taskitem
    isEditing = false; // Nulstil redigeringstilstand
    isCalendarVisible = false; // Skjul kalenderen efter opdatering af opgave
    StateHasChanged(); // Opdatér TodoPage komponenten
  }

  private async Task DeleteTask(TaskItem task)
  {
    if (task is null) return;

    var httpClient = HttpClientFactory.CreateClient("taskApi");

    var response = await httpClient.DeleteAsync($"api/task/{task.Id}");
    if (response.IsSuccessStatusCode)
    {
      tasks.Remove(task); // Fjern task fra listen
      currentTodo = new CreateTaskDto(); // Nulstil taskitem
      isEditing = false; // Nulstil redigeringstilstand
      isCalendarVisible = false; // Skjul kalenderen efter opdatering af opgave
      StateHasChanged(); // Opdatér visningen

      _nfService.Notify(NotificationSeverity.Success, "Success", "Task deleted successfully.");
    }
    else
    {
      errorMessage = await response.Content.ReadAsStringAsync();
      _nfService.Notify(NotificationSeverity.Error, "Failed", errorMessage);
    }
  }

  private async Task DeleteCompletedTasks()
  {
    var completedTaskIds = tasks.Where(task => task.IsCompleted).Select(task => task.Id).ToList();

    if (completedTaskIds.Any())
    {
      var httpClient = HttpClientFactory.CreateClient("taskApi");

      foreach (var taskId in completedTaskIds)
      {
        var response = await httpClient.DeleteAsync($"api/task/{taskId}");
        if (response.IsSuccessStatusCode)
        {
          tasks.RemoveAll(t => t.Id == taskId);
        }
        else
        {
          errorMessage = await response.Content.ReadAsStringAsync();


          _nfService.Notify(NotificationSeverity.Error, "Something went wrong", errorMessage);
        }
      }

      StateHasChanged();
    }
  }

  private async Task HandleTaskCompletedChange(TaskItem task)
  {
    var httpClient = HttpClientFactory.CreateClient("taskApi");
    var response = await httpClient.PutAsJsonAsync($"api/task/{task.Id}", task);
    if (response.IsSuccessStatusCode)
    {
      tasks = tasks.OrderBy(t => t.IsCompleted).ToList(); // Sortér opgaverne
      StateHasChanged(); // Opdatér visningen
    }
    else
    {
      errorMessage = await response.Content.ReadAsStringAsync();

      _nfService.Notify(NotificationSeverity.Warning, "Failed", errorMessage);
    }
  }

  private void ToggleCalendar()
  {
    isCalendarVisible = !isCalendarVisible;
  }

}