@page "/todolist"
@using TodoProject.Models
@using System.Collections.ObjectModel

<h3>ToDo List</h3>

<div style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
  <RadzenTextBox @bind-Value="newTaskTitle" Placeholder="What needs to be done?" Style="flex-grow: 1;" Name="TaskInput" />
  <RadzenButton Text="Add Reminder" Click="@ToggleDatePickerVisibility" Icon="event" />
  @if (showDatePicker)
  {
    <RadzenDatePicker TValue="DateTime?" Value="@newTaskDate" ValueChanged="@OnDateChanged" ValueExpression="@(() => newTaskDate)"
                      ShowTime="true" DateFormat="dd-MM-yyyy HH:mm" Style="width: auto; flex-grow: 0;" />
  }
  <RadzenButton Text="Add" Click="@AddTask" Style="margin-top: 0; padding: 8px 12px;" Icon="add" />
</div>

<RadzenDataGrid @ref="dataGrid" Data="@tasks" TItem="TaskItem" Style="height: 400px" LogicalFilterOperator="LogicalFilterOperator.And"
                EditMode="DataGridEditMode.Single" RowRender="@OnRowRender">
  <Columns>
    <RadzenDataGridColumn TItem="TaskItem" Property="Title" Title="Task" Width="auto">
      <Template Context="task">
        <div @onclick="() => ToggleCompletion(task)" style="cursor:pointer; width:100%">
          <span>@task.Title</span>
        </div>
      </Template>
    </RadzenDataGridColumn>
    <RadzenDataGridColumn TItem="TaskItem" Property="ScheduledFor" Title="Scheduled Time" Width="auto">
      <Template Context="task">
        @{
          if (task.ScheduledFor.HasValue)
          {
            // Check if the time part is exactly midnight
            if (task.ScheduledFor.Value.TimeOfDay == TimeSpan.Zero)
            {
              // Display only the date part
              <span>@task.ScheduledFor.Value.ToString("dd-MM-yyyy")</span>
            }
            else
            {
              // Display both date and time
              <span>@task.ScheduledFor.Value.ToString("dd-MM-yyyy HH:mm")</span>
            }
          }
        }
      </Template>
    </RadzenDataGridColumn>

    <RadzenDataGridColumn TItem="TaskItem" Context="task" Filterable="false" Sortable="false" Width="70px">
      <Template>
        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                      Click="@(() => DeleteTask(task))" />
      </Template>
    </RadzenDataGridColumn>
  </Columns>
</RadzenDataGrid>

@code {
  private string newTaskTitle;
  private DateTime? newTaskDate;
  private ObservableCollection<TaskItem> tasks = new ObservableCollection<TaskItem>();
  private RadzenDataGrid<TaskItem> dataGrid;
  private bool showDatePicker = false;

  private void OnRowRender(RowRenderEventArgs<TaskItem> args)
  {
    if (args.Data.IsCompleted)
    {
      args.Attributes.Add("class", "completed-row");
    }
  }

  private void AddTask()
  {
    if (!string.IsNullOrWhiteSpace(newTaskTitle))
    {
      tasks.Add(new TaskItem
        {
          Title = newTaskTitle.Trim(),
          IsCompleted = false,
          ScheduledFor = newTaskDate
        });

      newTaskTitle = "";
      newTaskDate = null;
      showDatePicker = false;

      StateHasChanged();  // Notify Blazor to re-render this component
    }
  }




  private void OnDateChanged(DateTime? date)
  {
    newTaskDate = date;
  }

  private void ToggleCompletion(TaskItem task)
  {

    task.IsCompleted = !task.IsCompleted; // Safely toggle the completion status

    dataGrid.Reload(); // Ensure dataGrid is not null before calling Reload


  }


  private void DeleteTask(TaskItem task)
  {
    tasks.Remove(task);
    dataGrid.Reload();
  }

  private void ToggleDatePickerVisibility()
  {
    showDatePicker = !showDatePicker;
  }

  private string GetTaskClass(TaskItem task)
  {
    return task.IsCompleted ? "completed" : "";
  }
}
